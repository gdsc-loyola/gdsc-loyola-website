---
export type Props = {
	/**
	 * @description The selector of the element to which the nav will be transparent on when the element is visible.
	 *
	 */
	transparentOn?: string;

	defaultMode?: "transparent" | "white";
};

import { Icon } from "astro-icon";
import Logo from "../../icons/Logo.astro";
import DropdownLink from "../DropdownLink.astro";
import Link from "../Link.astro";

const { transparentOn, defaultMode = "white" } = Astro.props;
---

<div
	class:list={[
		"w-full fixed top-0 left-0 z-10 h-[80px] transition-colors bg-white/0 duration-500 px-8",
		defaultMode === "white" && "white-nav",
	]}
	id="nav"
>
	<header class="py-6 flex justify-between max-w-laptop mx-auto">
		<Logo class="w-12 h-auto" />

		<button
			data-a11y-dialog-show="mobile-nav"
			class="md:hidden"
			aria-label="Navigation sidebar button"
		>
			<Icon name="fe:bar" class="w-6 h-6 fill-gray-500" />
		</button>

		<!-- TODO: Configure Links -->
		<nav class="gap-14 pl-14 md:flex hidden">
			<Link href="/">Home</Link>
			<Link href="#">About</Link>
			<DropdownLink
				label="Projects"
				items={[
					{
						href: "#",
						label: "Client Projects",
					},
				]}
			/>
		</nav>
	</header>
</div>
<div
	id="mobile-nav"
	class="dialog-container relative"
	aria-hidden="true"
	data-a11y-dialog="mobile-nav"
>
	<div data-a11y-dialog-hide class="dialog-overlay"></div>
	<!-- 3. The actual dialog -->
	<div
		role="document"
		class="bg-white absolute h-full p-4 right-0 top-0 w-[250px] max-w-full dialog-content"
	>
		<!-- 4. The close button -->
		<button
			type="button"
			data-a11y-dialog-hide
			aria-label="Close dialog"
			class="ml-auto block"
		>
			&times;
		</button>

		<!-- TODO: Configure Links -->
		<div class="gap-5 flex flex-col pt-8">
			<Link href="/">Home</Link>
			<Link href="#">About</Link>
			<DropdownLink
				inFlow
				label="Projects"
				items={[
					{
						href: "#",
						label: "Client Projects",
					},
				]}
			/>
			<DropdownLink
				inFlow
				label="Projects"
				items={[
					{
						href: "#",
						label: "Client Projects",
					},
				]}
			/>
		</div>
	</div>
</div>

<script>
	import A11yDialog from "a11y-dialog";

	const container = document.querySelector("#mobile-nav");
	if (container) {
		const dialog = new A11yDialog(container);
	}
</script>

<script define:vars={{ transparentOn }}>
	document.addEventListener("DOMContentLoaded", () => {
		if (transparentOn) {
			const nav = document.querySelector("#nav");
			const observer = new IntersectionObserver(
				(e) => {
					const { isIntersecting } = e[0];
					if (isIntersecting) {
						nav?.classList.remove("white-nav");
					} else {
						nav?.classList.add("white-nav");
					}
				},
				{
					root: null,
				}
			);
			const heroSection = document.querySelector(transparentOn);
			const x = document.querySelector("section");
			heroSection && observer.observe(heroSection);
		}
	});
</script>

<style>
	.white-nav {
		background-color: rgba(255, 255, 255, 0.8);

		backdrop-filter: blur(5px) saturate(1.2);
	}

	/**
 * 1. Make the dialog container, and its child overlay spread across
 *    the entire window.
 */
	.dialog-container,
	.dialog-overlay {
		position: fixed; /* 1 */
		top: 0; /* 1 */
		right: 0; /* 1 */
		bottom: 0; /* 1 */
		left: 0; /* 1 */
	}

	/**
 * 1. Make sure the dialog container and all its descendants sits on
 *    top of the rest of the page.
 * 2. Make the dialog container a flex container to easily center the
 *    dialog.
 */
	.dialog-container {
		z-index: 1000; /* 1 */
		display: flex; /* 2 */
	}

	/**
 * 1. Make sure the dialog container and all its descendants are not
 *    visible and not focusable when it is hidden.
 */
	.dialog-container[aria-hidden="true"] {
		display: none; /* 1 */
	}

	/**
 * 1. Make the overlay look like an overlay.
 */
	.dialog-overlay {
		background-color: rgba(43, 46, 56, 0.9); /* 1 */
	}

	@keyframes fade-in {
		from {
			opacity: 0;
		}
	}

	@keyframes slide-from-right {
		from {
			transform: translateX(60%);
		}
	}

	.dialog-overlay {
		animation: fade-in 200ms both;
	}

	/**
 * 1. Add an animation delay equal to the overlay animation duration to
 *    wait for the overlay to appear before animation in the dialog.
 */
	.dialog-content {
		animation: fade-in 300ms 150ms both, slide-from-right 300ms 150ms both; /* 1 */
	}
</style>
