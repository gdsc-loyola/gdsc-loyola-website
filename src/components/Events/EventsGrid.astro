---
import Section from "../Section.astro";
import { events } from "./data/events";
import EventCard from "./EventCard.astro";
import dayjs from "dayjs";

const processEvents = (evs: typeof events) => {
	const map = evs.reduce(
		(acc, e) => {
			if (e.name in acc && acc[e.name]) {
				acc[e.name].dates.push(e.date);
			} else {
				acc[e.name] = { ...e, dates: [e.date] };
				delete (acc[e.name] as any).date;
			}

			return acc;
		},
		{} as Record<
			string,
			{
				name: string;
				dates: Array<string>;
				description: string;
				image: Promise<typeof import("*.png")>;
			}
		>
	);
	return Object.values(map).map((e) => ({
		...e,
		dates: e.dates.sort((a, b) => {
			const aDate = dayjs(a);
			const bDate = dayjs(b);
			return aDate.isBefore(bDate) ? -1 : 1;
		}),
	}));
};
const upcomingEvents = processEvents(
	events.filter((e) => {
		return dayjs(e.date).isAfter(new Date());
	})
);

const pastEvents = processEvents(
	events.filter((e) => {
		return dayjs(e.date).isBefore(new Date());
	})
);

console.log(pastEvents);
---

<Section class="bg-blue-gradient">
	<div class="py-32">
		<div>
			<h2 class="text-xl md:text-2xl font-bold text-center">Upcoming Events</h2>
			<div
				class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-6"
				style={{
					gridAutoRows: "265px",
				}}
			>
				{
					upcomingEvents.map((e) => {
						return (
							<EventCard
								dates={e.dates}
								description={e.description}
								image={e.image}
								name={e.name}
							/>
						);
					})
				}
			</div>
		</div>

		<div class="mt-32">
			<h2 class="text-xl md:text-2xl font-bold text-center">Past Events</h2>
			<div
				class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 mt-6 gap-6"
				style={{
					gridAutoRows: "265px",
				}}
			>
				{
					pastEvents.map((e) => {
						return (
							<EventCard
								dates={e.dates}
								description={e.description}
								image={e.image}
								name={e.name}
							/>
						);
					})
				}
			</div>
		</div>
	</div>
</Section>
